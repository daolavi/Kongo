@page "/NodeStatistics"

@using Kongo.Core.DataServices
@using Kongo.Core.Models
@using System.Globalization

@inject KongoStatusModel _statusModel
@inject KongoDataStorage _nodeStatisticsData

<div class="container-fluid">
	<h1>Node Statistics</h1>
	<p><Button Color="Color.Primary" IsOutline="true" Clicked="@(async () => await HandleRedraw())">Refresh</Button></p>
	<p>
		<div class="row">
			<div><b>Chart timeframe:</b></div>
			<div class="col-sm-8">
				<Buttons>
					<Button IsActive="@(dataWindowFlag == TimeRangeEnum.FifteenMinutes ? true: false)" Color="Color.Light" Clicked="@(async () => await OnTimeRangeClicked(TimeRangeEnum.FifteenMinutes))">15 min</Button>
					<Button IsActive="@(dataWindowFlag == TimeRangeEnum.ThirtyMinutes ? true: false)" Color="Color.Light" Clicked="@(async () => await OnTimeRangeClicked(TimeRangeEnum.ThirtyMinutes))">30 min</Button>
					<Button IsActive="@(dataWindowFlag == TimeRangeEnum.OneHour ? true: false)" Color="Color.Light" Clicked="@(async () => await OnTimeRangeClicked(TimeRangeEnum.OneHour))">1 hour</Button>
					<Button IsActive="@(dataWindowFlag == TimeRangeEnum.TwelveHours ? true: false)" Color="Color.Light" Clicked="@(async () => await OnTimeRangeClicked(TimeRangeEnum.TwelveHours))">12 hour</Button>
					<Button IsActive="@(dataWindowFlag == TimeRangeEnum.OneDay ? true: false)" Color="Color.Light" Clicked="@(async () => await OnTimeRangeClicked(TimeRangeEnum.OneDay))">24 hour</Button>
					<Button IsActive="@(dataWindowFlag == TimeRangeEnum.ThreeDays ? true: false)" Color="Color.Light" Clicked="@(async () => await OnTimeRangeClicked(TimeRangeEnum.ThreeDays))">72 hour</Button>
				</Buttons>
			</div>
		</div>
	</p>
	<div class="container-fluid">
		<div class="container-fluid">
			<div class="row">
				<div class="col-sm-3 col-md-6">
					<LineChart @ref="timestampAnalysisChart" TItem="double" />
				</div>
				<div class="col-sm-9 col-md-6">
					<LineChart @ref="blockHeightChart" TItem="long" />
				</div>
			</div>
			<div class="row">
				<div class="col-sm-3 col-md-6">
					<LineChart @ref="uptimeChart" TItem="long" />
				</div>
				<div class="col-sm-9 col-md-6">
					<LineChart @ref="blocksReceivedChart" TItem="long" />
				</div>
			</div>
		</div>
	</div>
</div>

@code {
	const long NSPerSecond = 10000000;

	TimeRangeEnum dataWindowFlag = TimeRangeEnum.OneHour;
	int dataWindow = (int)TimeRangeEnum.OneHour;
	int groupInterval = TimeRangeMap.GetGroupingIntervalFromTimeRange(TimeRangeEnum.OneHour);

	LineChart<double> timestampAnalysisChart;
	LineChart<long> blockHeightChart;
	LineChart<long> uptimeChart;
	LineChart<long> blocksReceivedChart;

	List<NodeStatisticsChartModel> nodeStatisticsHistory;

	protected override Task OnInitializedAsync()
	{
		_nodeStatisticsData.Database.EnsureCreated();

		// set this value so the UI renders the active button correctly on first render
		dataWindowFlag = _statusModel.CurrentChartTimeframe;
		dataWindow = (int)_statusModel.CurrentChartTimeframe;
		groupInterval = TimeRangeMap.GetGroupingIntervalFromTimeRange(_statusModel.CurrentChartTimeframe);

		return Task.FromResult(true);
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await OnTimeRangeClicked(dataWindowFlag);
		}
	}

	async Task HandleRedraw()
	{
		timestampAnalysisChart.Clear();
		blockHeightChart.Clear();
		blocksReceivedChart.Clear();
		uptimeChart.Clear();

		RefreshHistory();

		timestampAnalysisChart.AddLabel(nodeStatisticsHistory.Select(p => p.Timestamp.ToString("g", DateTimeFormatInfo.InvariantInfo)).ToArray());
		timestampAnalysisChart.AddDataSet(GetTimestampSkewForLastBlockTime());

		blockHeightChart.AddLabel(nodeStatisticsHistory.Select(p => p.Timestamp.ToString("g", DateTimeFormatInfo.InvariantInfo)).ToArray());
		blockHeightChart.AddDataSet(GetMaxBlockHeight());

		blocksReceivedChart.AddLabel(nodeStatisticsHistory.Select(p => p.Timestamp.ToString("g", DateTimeFormatInfo.InvariantInfo)).ToArray());
		blocksReceivedChart.AddDataSet(GetMaxBlockRecvCnt());

		uptimeChart.AddLabel(nodeStatisticsHistory.Select(p => p.Timestamp.ToString("g", DateTimeFormatInfo.InvariantInfo)).ToArray());
		uptimeChart.AddDataSet(GetMaxUptime());
		uptimeChart.AddDataSet(GetMinUptime());

		await timestampAnalysisChart.Update();
		await blockHeightChart.Update();
		await blocksReceivedChart.Update();
		await uptimeChart.Update();
	}

	void RefreshHistory()
	{
		var allRecords = _nodeStatisticsData.NodeStatisticEntries.AsEnumerable();

		var filteredRecords = allRecords
								.Where(ns => ns.Timestamp > DateTimeOffset.UtcNow.AddMinutes(-dataWindow))
								.Select(t => new NodeStatisticsChartModel {
									Timestamp = t.Timestamp,
									LastBlockTime = t.LastBlockTime.HasValue ? t.LastBlockTime.Value : default,
									MaxBlockRecvCnt = t.BlockRecvCnt,
									MaxLastBlockHeight = long.Parse(t.LastBlockHeight),
									MaxUpTime = t.Uptime,
									MinUpTime = t.Uptime,
									SkewInMinutes = t.Timestamp.Subtract(t.LastBlockTime.HasValue ? t.LastBlockTime.Value : default).TotalMinutes
								}).ToList();

		var filteredRecordsCount = filteredRecords.Count();

		nodeStatisticsHistory = filteredRecords.GroupBy(x =>
		{
			var stamp = x.Timestamp;
			stamp = stamp.AddMinutes(-(stamp.Minute % groupInterval));
			stamp = stamp.AddMilliseconds(-stamp.Millisecond - 1000 * stamp.Second);
			stamp = stamp.AddTicks(-(stamp.UtcTicks % NSPerSecond));			
			return stamp;
		})
		.Select(g => new NodeStatisticsChartModel {
			Timestamp = g.Key,
			SkewInMinutes = g.Average(s => s.SkewInMinutes),
			LastBlockTime = g.Max(s => s.LastBlockTime),
			MaxBlockRecvCnt = g.Max(s => s.MaxBlockRecvCnt),
			MaxLastBlockHeight = g.Max(s => s.MaxLastBlockHeight),
			MaxUpTime = g.Max(s => s.MaxUpTime),
			MinUpTime = g.Min(s => s.MinUpTime)
		}).ToList();

	}

	LineChartDataset<double> GetTimestampSkewForLastBlockTime()
	{
		return new LineChartDataset<double>
		{
			Label = "Block Time Skew (LastBlockTime vs Server Time) in minutes",
			Data = nodeStatisticsHistory.Select(p => p.SkewInMinutes).ToList(),
			BackgroundColor = backgroundColors_BlockTimeSkew,
			BorderColor = borderColors_BlockTimeSkew,
			Fill = true,
			PointRadius = 2,
			BorderDash = new List<int> { }
		};
	}

	LineChartDataset<long> GetMaxBlockRecvCnt()
	{
		return new LineChartDataset<long>
		{
			Label = "Max Blocks Received",
			Data = nodeStatisticsHistory.Select(p => p.MaxBlockRecvCnt).ToList(),
			BackgroundColor = backgroundColors_MaxBlockRecvCnt,
			BorderColor = borderColors_MaxBlockRecvCnt,
			Fill = true,
			PointRadius = 2,
			BorderDash = new List<int> { }
		};
	}

	LineChartDataset<long> GetMaxBlockHeight()
	{
		return new LineChartDataset<long>
		{
			Label = "Max Block Height",
			Data = nodeStatisticsHistory.Select(p => p.MaxLastBlockHeight).ToList(),
			BackgroundColor = backgroundColors_MaxBlockHeight,
			BorderColor = borderColors_MaxBlockHeight,
			Fill = true,
			PointRadius = 2,
			BorderDash = new List<int> { }
		};
	}

	LineChartDataset<long> GetMaxUptime()
	{
		return new LineChartDataset<long>
		{
			Label = "Max Node Uptime",
			Data = nodeStatisticsHistory.Select(p => p.MaxUpTime).ToList(),
			BackgroundColor = backgroundColors_MaxUptime,
			BorderColor = borderColors_MaxUptime,
			Fill = true,
			PointRadius = 2,
			BorderDash = new List<int> { }
		};
	}

	LineChartDataset<long> GetMinUptime()
	{
		return new LineChartDataset<long>
		{
			Label = "Min Node Uptime",
			Data = nodeStatisticsHistory.Select(p => p.MinUpTime).ToList(),
			BackgroundColor = backgroundColors_MinUptime,
			BorderColor = borderColors_MinUptime,
			Fill = true,
			PointRadius = 2,
			BorderDash = new List<int> { }
		};
	}

	List<string> backgroundColors_BlockTimeSkew = new List<string> { ChartColor.FromRgba(255, 204, 153, 0.2f) };
	List<string> borderColors_BlockTimeSkew = new List<string> { ChartColor.FromRgba(255, 204, 153, 1f) };

	List<string> backgroundColors_MaxBlockRecvCnt = new List<string> { ChartColor.FromRgba(255, 204, 153, 0.2f) };
	List<string> borderColors_MaxBlockRecvCnt = new List<string> { ChartColor.FromRgba(255, 204, 153, 1f) };

	List<string> backgroundColors_MaxBlockHeight = new List<string> { ChartColor.FromRgba(153, 153, 255, 0.2f) };
	List<string> borderColors_MaxBlockHeight = new List<string> { ChartColor.FromRgba(153, 153, 255, 1f) };

	List<string> backgroundColors_MaxUptime = new List<string> { ChartColor.FromRgba(102, 255, 102, 0.2f) };
	List<string> borderColors_MaxUptime = new List<string> { ChartColor.FromRgba(102, 255, 102, 1f) };
	List<string> backgroundColors_MinUptime = new List<string> { ChartColor.FromRgba(255, 102, 102, 0.2f) };
	List<string> borderColors_MinUptime = new List<string> { ChartColor.FromRgba(255, 102, 102, 1f) };

	async Task OnTimeRangeClicked(TimeRangeEnum range)
	{
		_statusModel.CurrentChartTimeframe = range;
		dataWindowFlag = range;
		dataWindow = (int)dataWindowFlag;
		groupInterval = TimeRangeMap.GetGroupingIntervalFromTimeRange(range);
		await HandleRedraw();
	}
}
