@page "/NodeStatistics"

@using Kongo.Core.DataServices
@using Kongo.Core.Models
@using System.Globalization

@inject KongoDataStorage _nodeStatisticsData

<div class="container-fluid">
	<h1>Node Statistics</h1>
	<p><Button Color="Color.Primary" IsOutline="true" Clicked="@(async () => await HandleRedraw())">Refresh</Button></p>
	<p>
		<div class="row">
			<div><b>Chart timeframe:</b></div>
			<div class="col-sm-8">
				<Buttons>
					<Button IsActive="@(dataWindowFlag == TimeRangeEnum.FifteenMinutes ? true: false)" Color="Color.Light" Clicked="@(async () => await OnTimeRangeClicked(TimeRangeEnum.FifteenMinutes))">15 min</Button>
					<Button IsActive="@(dataWindowFlag == TimeRangeEnum.ThirtyMinutes ? true: false)" Color="Color.Light" Clicked="@(async () => await OnTimeRangeClicked(TimeRangeEnum.ThirtyMinutes))">30 min</Button>
					<Button IsActive="@(dataWindowFlag == TimeRangeEnum.OneHour ? true: false)" Color="Color.Light" Clicked="@(async () => await OnTimeRangeClicked(TimeRangeEnum.OneHour))">1 hour</Button>
					<Button IsActive="@(dataWindowFlag == TimeRangeEnum.TwelveHours ? true: false)" Color="Color.Light" Clicked="@(async () => await OnTimeRangeClicked(TimeRangeEnum.TwelveHours))">12 hour</Button>
					<Button IsActive="@(dataWindowFlag == TimeRangeEnum.OneDay ? true: false)" Color="Color.Light" Clicked="@(async () => await OnTimeRangeClicked(TimeRangeEnum.OneDay))">24 hour</Button>
					<Button IsActive="@(dataWindowFlag == TimeRangeEnum.ThreeDays ? true: false)" Color="Color.Light" Clicked="@(async () => await OnTimeRangeClicked(TimeRangeEnum.ThreeDays))">72 hour</Button>
				</Buttons>
			</div>
		</div>		
	</p>
	<div class="container-fluid">
		<div class="container-fluid">
			<div class="row">
				<div class="col-sm-3 col-md-6">
					<LineChart @ref="timestampAnalysisChart" TItem="double" />
				</div>
				<div class="col-sm-9 col-md-6">
					<LineChart @ref="blockHeightChart" TItem="long" />
				</div>
			</div>
			<div class="row">
				<div class="col-sm-3 col-md-6">
					<LineChart @ref="uptimeChart" TItem="long" />
				</div>
				<div class="col-sm-9 col-md-6">
					<LineChart @ref="blocksReceivedChart" TItem="long" />
				</div>
			</div>
		</div>
	</div>
</div>

@code {
	TimeRangeEnum dataWindowFlag = TimeRangeEnum.OneHour;
	int dataWindow = (int)TimeRangeEnum.OneHour;	
	int groupInterval = TimeRangeMap.GetGroupingIntervalFromTimeRange(TimeRangeEnum.OneHour);

	LineChart<double> timestampAnalysisChart;
	LineChart<long> blockHeightChart;
	LineChart<long> uptimeChart;
	LineChart<long> blocksReceivedChart;

	List<NodeStatisticsChartModel> nodeStatisticsHistory;

	protected override Task OnInitializedAsync()
	{
		_nodeStatisticsData.Database.EnsureCreated();

		// set this value so the UI renders the active button correctly on first render
		dataWindowFlag = TimeRangeEnum.OneHour;

		return Task.FromResult(true);
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await OnTimeRangeClicked(dataWindowFlag);
		}
	}

	async Task HandleRedraw()
	{
		timestampAnalysisChart.Clear();
		blockHeightChart.Clear();
		blocksReceivedChart.Clear();
		uptimeChart.Clear();

		RefreshHistory();

		timestampAnalysisChart.AddLabel(nodeStatisticsHistory.Select(p => p.Timestamp.ToString("g", DateTimeFormatInfo.InvariantInfo)).ToArray());
		timestampAnalysisChart.AddDataSet(GetTimestampSkewForLastBlockTime());

		blockHeightChart.AddLabel(nodeStatisticsHistory.Select(p => p.Timestamp.ToString("g", DateTimeFormatInfo.InvariantInfo)).ToArray());
		blockHeightChart.AddDataSet(GetBlockHeight());

		blocksReceivedChart.AddLabel(nodeStatisticsHistory.Select(p => p.Timestamp.ToString("g", DateTimeFormatInfo.InvariantInfo)).ToArray());
		blocksReceivedChart.AddDataSet(GetBlockRecvCnt());

		uptimeChart.AddLabel(nodeStatisticsHistory.Select(p => p.Timestamp.ToString("g", DateTimeFormatInfo.InvariantInfo)).ToArray());
		uptimeChart.AddDataSet(GetUptime());

		await timestampAnalysisChart.Update();
		await blockHeightChart.Update();
		await blocksReceivedChart.Update();
		await uptimeChart.Update();
	}

	void RefreshHistory()
	{
		var allRecords = _nodeStatisticsData.NodeStats.AsEnumerable();
		var filteredRecords = allRecords.Where(ns => ns.Timestamp > DateTimeOffset.UtcNow.AddMinutes(-dataWindow));
		var transformedRecords = filteredRecords.Select(t => new NodeStatisticsChartModel {Timestamp = t.Timestamp, LastBlockTime = t.LastBlockTime.HasValue ? t.LastBlockTime.Value : default, BlockRecvCnt = t.BlockRecvCnt, LastBlockHeight = long.Parse(t.LastBlockHeight), UpTime = t.Uptime} );

		nodeStatisticsHistory = transformedRecords.GroupBy(x =>
		{
			var stamp = x.Timestamp;
			stamp = stamp.AddMinutes(-(stamp.Minute % groupInterval));
			stamp = stamp.AddMilliseconds(-stamp.Millisecond - 1000 * stamp.Second);
			return stamp;
		})
		.Select(g => new NodeStatisticsChartModel { Timestamp = g.Key, LastBlockTime = g.Max(s => s.LastBlockTime), BlockRecvCnt = g.Max(s => s.BlockRecvCnt), LastBlockHeight = g.Max(s => s.LastBlockHeight), UpTime = g.Max(s => s.UpTime)})
		.ToList();
	}

	LineChartDataset<double> GetTimestampSkewForLastBlockTime()
	{
		return new LineChartDataset<double>
		{
			Label = "Time Skew (Block Time vs Server Time) in minutes",
			Data = nodeStatisticsHistory.Select(p => new { SkewInMinutes = p.Timestamp.Subtract(p.LastBlockTime).TotalMinutes }).Select(p => p.SkewInMinutes).ToList(),
			BackgroundColor = backgroundColors_BlockRecvCnt,
			BorderColor = borderColors_BlockRecvCnt,
			Fill = true,
			PointRadius = 2,
			BorderDash = new List<int> { }
		};
	}

	LineChartDataset<long> GetBlockRecvCnt()
	{
		return new LineChartDataset<long>
		{
			Label = "Blocks Received",
			Data = nodeStatisticsHistory.Select(p => p.BlockRecvCnt).ToList(),
			BackgroundColor = backgroundColors_BlockRecvCnt,
			BorderColor = borderColors_BlockRecvCnt,
			Fill = true,
			PointRadius = 2,
			BorderDash = new List<int> { }
		};
	}

	LineChartDataset<long> GetBlockHeight()
	{
		return new LineChartDataset<long>
		{
			Label = "Block Height",
			Data = nodeStatisticsHistory.Select(p => p.LastBlockHeight).ToList(),
			BackgroundColor = backgroundColors_BlockHeight,
			BorderColor = borderColors_BlockHeight,
			Fill = true,
			PointRadius = 2,
			BorderDash = new List<int> { }
		};
	}

	LineChartDataset<long> GetUptime()
	{
		return new LineChartDataset<long>
		{
			Label = "Node Uptime",
			Data = nodeStatisticsHistory.Select(p => p.UpTime).ToList(),
			BackgroundColor = backgroundColors_Uptime,
			BorderColor = borderColors_Uptime,
			Fill = true,
			PointRadius = 2,
			BorderDash = new List<int> { }
		};
	}

	List<string> backgroundColors_BlockRecvCnt = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.2f) };
	List<string> borderColors_BlockRecvCnt = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f) };

	List<string> backgroundColors_BlockHeight = new List<string> { ChartColor.FromRgba(255, 99, 237, 0.2f) };
	List<string> borderColors_BlockHeight = new List<string> { ChartColor.FromRgba(255, 99, 237, 1f) };

	List<string> backgroundColors_Uptime = new List<string> { ChartColor.FromRgba(97, 250, 120, 0.2f) };
	List<string> borderColors_Uptime = new List<string> { ChartColor.FromRgba(97, 250, 120, 1f) };

	async Task OnTimeRangeClicked(TimeRangeEnum range)
	{
		dataWindowFlag = range;
		dataWindow = (int)dataWindowFlag;
		groupInterval = TimeRangeMap.GetGroupingIntervalFromTimeRange(range);
		await HandleRedraw();
	}
}
